{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"SistemaControlVersiones/","text":"Actividades - control de versiones Adem\u00e1s de Git, \u00bfque otros sistemas de control de versiones existen? Git es el m\u00e1s conocido, pero existen otros como, CVS, Subversion, y Mercurial Adem\u00e1s de Git, \u00bfque otros sistemas de control de versiones existen? En Git tenemos el Working Directory, el \u00e1rea en el que trabajamos el proyecto; el Staging Area, que es donde dejamos los cambios que hemos hecho al proyecto, como si fuera un limbo; y el Repository, que es donde finalmente se suben los proyectos. En Git, \u00bfpara qu\u00e9 sirve el comando git config ? Se usa para la configuraci\u00f3n de los par\u00e1metros de Git de forma global o local. En Git, \u00bfpara qu\u00e9 sirve el comando git init ? Es utilizado para crear un nuevo repositorio de Git, ya sea para convertir un proyecto en un repositorio o para crear uno vac\u00edo. En Git, \u00bfpara qu\u00e9 sirve el comando git clone ? Este comando apunta a un directorio existente y lo clona o copia en otro repositorio existente. En Git, \u00bfpara qu\u00e9 sirve el comando git status ? El comando Git status muestra el estado del Working Directory y del Staging Area. Permite ver los cambios que se han preparado, los que no y los archivos en los que Git no va a realizar el seguimiento. En Git, \u00bfpara qu\u00e9 sirve el comando git add ? Git add a\u00f1ade un cambio del directorio de trabajo en el Staging Area. De este modo, indica a Git que quieres incluir actualizaciones en un archivo concreto en la pr\u00f3xima confirmaci\u00f3n. En Git, \u00bfpara qu\u00e9 sirve el comando git commit Este comando se usa para confirmar los cambios y a\u00f1adirlos al Repository. En Git, \u00bfpara qu\u00e9 sirve el comando git log ? Nos permite explorar el historial del repositorio y todos sus cambios, as\u00ed como mostrarlos En Git, \u00bfpara qu\u00e9 sirve el comando git checkout -- nombrearchivo ? Es un comando que nos mueve a la rama de ese archivo del repositorio En Git, \u00bfpara qu\u00e9 sirve el comando git branch ? Nos crea diferentes ramas en el repositorio y nos permite trabajar con ellas, enumerarlas, eliminarlas... En Git, \u00bfpara qu\u00e9 sirve el comando git checkout ? Es un comando que nos permite movernos por las ramas creadas del repositorio con el Git branch En Git, \u00bfpara qu\u00e9 sirve el comando git merge ? Es un comando que se utiliza para unir las ramas en una sola, as\u00ed unificando el desarrollo del proyecto. En Git, explica c\u00f3mo funciona la fusi\u00f3n (merge) de tipo fast-forward. Acelera el flujo del trabajo en el proceso de desarrollo del proyecto. Realiza fusiones con avance r\u00e1pido en las situaciones donde exista un proceso lineal desde el xtremo de la rama actual y hasta la rama de destino. En Git, explica c\u00f3mo funciona la fusi\u00f3n (merge) de tipo 3-way. La raz\u00f3n por la que se llama 3-way merge es porque la confirmaci\u00f3n de fusi\u00f3n se basa en 3 diferentes. El ancestro com\u00fan de nuestras ramas, en este caso comete el n\u00famero C3. Este compromiso contiene c\u00f3digo antes de que diverjamos en diferentes ramas. Para fusionar los cambios de ambas ramas, Git mira las tres instant\u00e1neas diferentes: la instant\u00e1nea anterior y la instant\u00e1nea posterior. Bas\u00e1ndose en estas instant\u00e1neas, Git combina los cambios mediante la creaci\u00f3n de una nueva confirmaci\u00f3n denominada Merge Commit.","title":"Actividades - control de versiones"},{"location":"SistemaControlVersiones/#actividades-control-de-versiones","text":"","title":"Actividades - control de versiones"},{"location":"SistemaControlVersiones/#ademas-de-git-que-otros-sistemas-de-control-de-versiones-existen","text":"Git es el m\u00e1s conocido, pero existen otros como, CVS, Subversion, y Mercurial","title":"Adem\u00e1s de Git, \u00bfque otros sistemas de control de versiones existen?"},{"location":"SistemaControlVersiones/#ademas-de-git-que-otros-sistemas-de-control-de-versiones-existen_1","text":"En Git tenemos el Working Directory, el \u00e1rea en el que trabajamos el proyecto; el Staging Area, que es donde dejamos los cambios que hemos hecho al proyecto, como si fuera un limbo; y el Repository, que es donde finalmente se suben los proyectos.","title":"Adem\u00e1s de Git, \u00bfque otros sistemas de control de versiones existen?"},{"location":"SistemaControlVersiones/#en-git-para-que-sirve-el-comando-git-config","text":"Se usa para la configuraci\u00f3n de los par\u00e1metros de Git de forma global o local.","title":"En Git, \u00bfpara qu\u00e9 sirve el comando git config?"},{"location":"SistemaControlVersiones/#en-git-para-que-sirve-el-comando-git-init","text":"Es utilizado para crear un nuevo repositorio de Git, ya sea para convertir un proyecto en un repositorio o para crear uno vac\u00edo.","title":"En Git, \u00bfpara qu\u00e9 sirve el comando git init?"},{"location":"SistemaControlVersiones/#en-git-para-que-sirve-el-comando-git-clone","text":"Este comando apunta a un directorio existente y lo clona o copia en otro repositorio existente.","title":"En Git, \u00bfpara qu\u00e9 sirve el comando git clone?"},{"location":"SistemaControlVersiones/#en-git-para-que-sirve-el-comando-git-status","text":"El comando Git status muestra el estado del Working Directory y del Staging Area. Permite ver los cambios que se han preparado, los que no y los archivos en los que Git no va a realizar el seguimiento.","title":"En Git, \u00bfpara qu\u00e9 sirve el comando git status?"},{"location":"SistemaControlVersiones/#en-git-para-que-sirve-el-comando-git-add","text":"Git add a\u00f1ade un cambio del directorio de trabajo en el Staging Area. De este modo, indica a Git que quieres incluir actualizaciones en un archivo concreto en la pr\u00f3xima confirmaci\u00f3n.","title":"En Git, \u00bfpara qu\u00e9 sirve el comando git add?"},{"location":"SistemaControlVersiones/#en-git-para-que-sirve-el-comando-git-commit","text":"Este comando se usa para confirmar los cambios y a\u00f1adirlos al Repository.","title":"En Git, \u00bfpara qu\u00e9 sirve el comando git commit"},{"location":"SistemaControlVersiones/#en-git-para-que-sirve-el-comando-git-log","text":"Nos permite explorar el historial del repositorio y todos sus cambios, as\u00ed como mostrarlos","title":"En Git, \u00bfpara qu\u00e9 sirve el comando git log?"},{"location":"SistemaControlVersiones/#en-git-para-que-sirve-el-comando-git-checkout-nombrearchivo","text":"Es un comando que nos mueve a la rama de ese archivo del repositorio","title":"En Git, \u00bfpara qu\u00e9 sirve el comando git checkout -- nombrearchivo?"},{"location":"SistemaControlVersiones/#en-git-para-que-sirve-el-comando-git-branch","text":"Nos crea diferentes ramas en el repositorio y nos permite trabajar con ellas, enumerarlas, eliminarlas...","title":"En Git, \u00bfpara qu\u00e9 sirve el comando git branch?"},{"location":"SistemaControlVersiones/#en-git-para-que-sirve-el-comando-git-checkout","text":"Es un comando que nos permite movernos por las ramas creadas del repositorio con el Git branch","title":"En Git, \u00bfpara qu\u00e9 sirve el comando git checkout?"},{"location":"SistemaControlVersiones/#en-git-para-que-sirve-el-comando-git-merge","text":"Es un comando que se utiliza para unir las ramas en una sola, as\u00ed unificando el desarrollo del proyecto.","title":"En Git, \u00bfpara qu\u00e9 sirve el comando git merge?"},{"location":"SistemaControlVersiones/#en-git-explica-como-funciona-la-fusion-merge-de-tipo-fast-forward","text":"Acelera el flujo del trabajo en el proceso de desarrollo del proyecto. Realiza fusiones con avance r\u00e1pido en las situaciones donde exista un proceso lineal desde el xtremo de la rama actual y hasta la rama de destino.","title":"En Git, explica c\u00f3mo funciona la fusi\u00f3n (merge) de tipo fast-forward."},{"location":"SistemaControlVersiones/#en-git-explica-como-funciona-la-fusion-merge-de-tipo-3-way","text":"La raz\u00f3n por la que se llama 3-way merge es porque la confirmaci\u00f3n de fusi\u00f3n se basa en 3 diferentes. El ancestro com\u00fan de nuestras ramas, en este caso comete el n\u00famero C3. Este compromiso contiene c\u00f3digo antes de que diverjamos en diferentes ramas. Para fusionar los cambios de ambas ramas, Git mira las tres instant\u00e1neas diferentes: la instant\u00e1nea anterior y la instant\u00e1nea posterior. Bas\u00e1ndose en estas instant\u00e1neas, Git combina los cambios mediante la creaci\u00f3n de una nueva confirmaci\u00f3n denominada Merge Commit.","title":"En Git, explica c\u00f3mo funciona la fusi\u00f3n (merge) de tipo 3-way."},{"location":"T4-optimizacion/","text":"T4 Optimizaci\u00f3n y Documentaci\u00f3n \u00bfQu\u00e9 se entiende por hediondez del c\u00f3digo? Pon al menos 5 ejemplos. Es cualquier s\u00edntoma en el c\u00f3digo fuente de un programa que posiblemente indica un problema m\u00e1s profundo. Las hediondeces del c\u00f3digo usualmente no son bug de programaci\u00f3n ni errores, ni son t\u00e9cnicamente incorrectos y en realidad no impiden que el programa funcione correctamente. En cambio, indican deficiencias en el dise\u00f1o de software que puede ralentizar el desarrollo o aumentan el riesgo de errores o fallos en el futuro. C\u00f3digo duplicado Nombres de variables y m\u00e9todos confusos o poco descriptivos Funciones o m\u00e9todos muy largos o complejos Acoplamiento excesivo entre clases o m\u00f3dulos Uso abusivo de patrones de dise\u00f1o o estructuras de control anidadas. \u00bfQu\u00e9 tipo de herramienta utilizamos para hacer an\u00e1lisis est\u00e1tico del c\u00f3digo? Mediante analizadores como los linters, aunque tambien existen otros como SonarQube, ESLint, PMD, JSHint o FindBugs, aunque tambien usamos mucho SpotBUgs en Java con el entorno de iDEA. \u00bfQu\u00e9 sitios web nos permiten hacer an\u00e1lisis est\u00e1tico del c\u00f3digo o Continuous Inspection? Aqu\u00ed van algunas de las m\u00e1s usadas: SonarQube CodeClimate Codacy GitLab Code Quality CircleCI Orbs Travis CI Jenkins Bitbucket Pipelines AWS CodeBuild Azure DevOps Pipelines Instala en Intellij iDEA el plugin SpotBugs, si no lo tienes a\u00fan instalado. Realiza an\u00e1lisis est\u00e1tico de c\u00f3digo para las clases del proyecto con bucle infinito. Habiendo instalado el SpotBugs en iDea IntelliJ , hemos generado un bucle infinito para que lo detecte, pero el plug-in no funciona como deber\u00eda. Intentar\u00e9 actualizar esta p\u00e1gina si consigo dar con la clave. \u00bfQu\u00e9 es la refactorizaci\u00f3n? La refactorizaci\u00f3n es el proceso de mejorar el dise\u00f1o interno de un c\u00f3digo fuente sin cambiar su comportamiento externo. El objetivo principal de la refactorizaci\u00f3n es mejorar la legibilidad, la mantenibilidad y la escalabilidad del c\u00f3digo . Al refactorizar, se modifican los detalles del dise\u00f1o del c\u00f3digo, como la estructura, el estilo, la organizaci\u00f3n y el formato del c\u00f3digo. \u00bfQu\u00e9 t\u00e9cnicas se utilizan a menudo a la hora de refactorizar? Algunas t\u00e9cnicas comunes que se utilizan al refactorizar incluyen: Extracci\u00f3n de m\u00e9todos : Esta t\u00e9cnica implica la separaci\u00f3n de un bloque de c\u00f3digo en un m\u00e9todo separado, lo que puede mejorar la legibilidad y la reutilizaci\u00f3n del c\u00f3digo. Consolidaci\u00f3n de m\u00e9todos : Esta t\u00e9cnica implica la combinaci\u00f3n de varios m\u00e9todos en uno solo para simplificar la l\u00f3gica del programa y reducir la complejidad. Eliminaci\u00f3n de c\u00f3digo duplicado : Esta t\u00e9cnica implica la identificaci\u00f3n y eliminaci\u00f3n de c\u00f3digo duplicado, lo que puede mejorar la mantenibilidad y la escalabilidad del c\u00f3digo. Renombrado de variables y m\u00e9todos : Esta t\u00e9cnica implica cambiar el nombre de las variables y los m\u00e9todos para mejorar la legibilidad del c\u00f3digo. Extracci\u00f3n de clases : Esta t\u00e9cnica implica la creaci\u00f3n de una nueva clase para manejar una funcionalidad espec\u00edfica del c\u00f3digo, lo que puede mejorar la organizaci\u00f3n y la escalabilidad del c\u00f3digo. Cambios de dise\u00f1o : Esta t\u00e9cnica implica la modificaci\u00f3n de la estructura y organizaci\u00f3n del c\u00f3digo para mejorar su dise\u00f1o general y reducir su complejidad.","title":"T4 Optimizaci\u00f3n y Documentaci\u00f3n"},{"location":"T4-optimizacion/#t4-optimizacion-y-documentacion","text":"","title":"T4 Optimizaci\u00f3n y Documentaci\u00f3n"},{"location":"T4-optimizacion/#que-se-entiende-por-hediondez-del-codigo-pon-al-menos-5-ejemplos","text":"Es cualquier s\u00edntoma en el c\u00f3digo fuente de un programa que posiblemente indica un problema m\u00e1s profundo. Las hediondeces del c\u00f3digo usualmente no son bug de programaci\u00f3n ni errores, ni son t\u00e9cnicamente incorrectos y en realidad no impiden que el programa funcione correctamente. En cambio, indican deficiencias en el dise\u00f1o de software que puede ralentizar el desarrollo o aumentan el riesgo de errores o fallos en el futuro. C\u00f3digo duplicado Nombres de variables y m\u00e9todos confusos o poco descriptivos Funciones o m\u00e9todos muy largos o complejos Acoplamiento excesivo entre clases o m\u00f3dulos Uso abusivo de patrones de dise\u00f1o o estructuras de control anidadas.","title":"\u00bfQu\u00e9 se entiende por hediondez del c\u00f3digo? Pon al menos 5 ejemplos."},{"location":"T4-optimizacion/#que-tipo-de-herramienta-utilizamos-para-hacer-analisis-estatico-del-codigo","text":"Mediante analizadores como los linters, aunque tambien existen otros como SonarQube, ESLint, PMD, JSHint o FindBugs, aunque tambien usamos mucho SpotBUgs en Java con el entorno de iDEA.","title":"\u00bfQu\u00e9 tipo de herramienta utilizamos para hacer an\u00e1lisis est\u00e1tico del c\u00f3digo?"},{"location":"T4-optimizacion/#que-sitios-web-nos-permiten-hacer-analisis-estatico-del-codigo-o-continuous-inspection","text":"Aqu\u00ed van algunas de las m\u00e1s usadas: SonarQube CodeClimate Codacy GitLab Code Quality CircleCI Orbs Travis CI Jenkins Bitbucket Pipelines AWS CodeBuild Azure DevOps Pipelines","title":"\u00bfQu\u00e9 sitios web nos permiten hacer an\u00e1lisis est\u00e1tico del c\u00f3digo o Continuous Inspection?"},{"location":"T4-optimizacion/#instala-en-intellij-idea-el-plugin-spotbugs-si-no-lo-tienes-aun-instalado-realiza-analisis-estatico-de-codigo-para-las-clases-del-proyecto-con-bucle-infinito","text":"Habiendo instalado el SpotBugs en iDea IntelliJ , hemos generado un bucle infinito para que lo detecte, pero el plug-in no funciona como deber\u00eda. Intentar\u00e9 actualizar esta p\u00e1gina si consigo dar con la clave.","title":"Instala en Intellij iDEA el plugin SpotBugs, si no lo tienes a\u00fan instalado. Realiza an\u00e1lisis est\u00e1tico de c\u00f3digo para las clases del proyecto con bucle infinito."},{"location":"T4-optimizacion/#que-es-la-refactorizacion","text":"La refactorizaci\u00f3n es el proceso de mejorar el dise\u00f1o interno de un c\u00f3digo fuente sin cambiar su comportamiento externo. El objetivo principal de la refactorizaci\u00f3n es mejorar la legibilidad, la mantenibilidad y la escalabilidad del c\u00f3digo . Al refactorizar, se modifican los detalles del dise\u00f1o del c\u00f3digo, como la estructura, el estilo, la organizaci\u00f3n y el formato del c\u00f3digo.","title":"\u00bfQu\u00e9 es la refactorizaci\u00f3n?"},{"location":"T4-optimizacion/#que-tecnicas-se-utilizan-a-menudo-a-la-hora-de-refactorizar","text":"Algunas t\u00e9cnicas comunes que se utilizan al refactorizar incluyen: Extracci\u00f3n de m\u00e9todos : Esta t\u00e9cnica implica la separaci\u00f3n de un bloque de c\u00f3digo en un m\u00e9todo separado, lo que puede mejorar la legibilidad y la reutilizaci\u00f3n del c\u00f3digo. Consolidaci\u00f3n de m\u00e9todos : Esta t\u00e9cnica implica la combinaci\u00f3n de varios m\u00e9todos en uno solo para simplificar la l\u00f3gica del programa y reducir la complejidad. Eliminaci\u00f3n de c\u00f3digo duplicado : Esta t\u00e9cnica implica la identificaci\u00f3n y eliminaci\u00f3n de c\u00f3digo duplicado, lo que puede mejorar la mantenibilidad y la escalabilidad del c\u00f3digo. Renombrado de variables y m\u00e9todos : Esta t\u00e9cnica implica cambiar el nombre de las variables y los m\u00e9todos para mejorar la legibilidad del c\u00f3digo. Extracci\u00f3n de clases : Esta t\u00e9cnica implica la creaci\u00f3n de una nueva clase para manejar una funcionalidad espec\u00edfica del c\u00f3digo, lo que puede mejorar la organizaci\u00f3n y la escalabilidad del c\u00f3digo. Cambios de dise\u00f1o : Esta t\u00e9cnica implica la modificaci\u00f3n de la estructura y organizaci\u00f3n del c\u00f3digo para mejorar su dise\u00f1o general y reducir su complejidad.","title":"\u00bfQu\u00e9 t\u00e9cnicas se utilizan a menudo a la hora de refactorizar?"},{"location":"Tema1lenguajes/","text":"Lenguajes de programaci\u00f3n 1. \u00bfQu\u00e9 diferencia existe entre los lenguajes declarativos y los imperativos?. Nombra al menos 2 de cada tipo. Los declarativos indican el resultado que se obtiene sin especificar los pasos anteriores(Prolog, SQL...) y los imperativos indican los pasos a seguir para obtener el resultado (Java, C++...) 2. \u00bfExplica qu\u00e9 es compilar? \u00bfExplica qu\u00e9 es interpretar? La compilaci\u00f3n es una traducci\u00f3n del lenguaje a otro formato m\u00e1s legible para el ordenador, siendo este un paso previo a su ejecuci\u00f3n La interpretaci\u00f3n es ejecutar un programa a partir del c\u00f3digo en un lenguaje de programaci\u00f3n es no generar una traducci\u00f3n a c\u00f3digo m\u00e1quina, sino analizar el c\u00f3digo y realizar lo que \u00e9ste indique. 3. Ventajas de los lenguajes compilados: Al haber compilado y traducido el programa, su pricnipal ventaja es que tiene una ejecuci\u00f3n muy eficiente. 4. Ventajas de los lenguajes interpretados: En cambio, una ventaja de los interpretados es que el c\u00f3digo fuente se interpreta directamente. 5. Nombra 2 lenguajes compilados y otros 2 interpretados. Dos compilados pueden ser C y C++ y dos compilados pueden ser Javascript o PHP. 6. Puede considerarse c\u00f3digo objeto el bytecode generado en Java tras la compilaci\u00f3n? Explica la respuesta. Se puede considerar c\u00f3digo objeto para esa m\u00e1quina virtual en particular, en ning\u00fan caso ser\u00e1 un c\u00f3digo objeto nativo al ya haber sido compilado. 7. Pon un ejemplo de lenguaje de los siguientes tipos: Bajo nivel: Ensamblador Nivel intermedio: C Alto nivel: Java 8.\u00bfQu\u00e9 paradigma de programaci\u00f3n siguen los siguientes lenguajes? C: imperativo estructurado C++: imperativo multiparadigma SQL: declarativo algebraico Java: imperativo orientado a objetos Javascript: imperativo multiparadigma Lisp: dclarativo funcional Prolog: declarativo l\u00f3gico 9. Explica qu\u00e9 criterios pueden seguirse a la hora de elegir un lenguade de programaci\u00f3n para el desarrollo software. Campo de aplicaci\u00f3n Experiencia previa Herramientas de desarrollo Documentaci\u00f3n disponible Base de usuarios Reusabilidad Transportabilidad Imposici\u00f3n del cliente","title":"Lenguajes de Programaci\u00f3n"},{"location":"Tema1lenguajes/#lenguajes-de-programacion","text":"","title":"Lenguajes de programaci\u00f3n"},{"location":"Tema1lenguajes/#1-que-diferencia-existe-entre-los-lenguajes-declarativos-y-los-imperativos-nombra-al-menos-2-de-cada-tipo","text":"Los declarativos indican el resultado que se obtiene sin especificar los pasos anteriores(Prolog, SQL...) y los imperativos indican los pasos a seguir para obtener el resultado (Java, C++...)","title":"1. \u00bfQu\u00e9 diferencia existe entre los lenguajes declarativos y los imperativos?. Nombra al menos 2 de cada tipo."},{"location":"Tema1lenguajes/#2-explica-que-es-compilar-explica-que-es-interpretar","text":"La compilaci\u00f3n es una traducci\u00f3n del lenguaje a otro formato m\u00e1s legible para el ordenador, siendo este un paso previo a su ejecuci\u00f3n La interpretaci\u00f3n es ejecutar un programa a partir del c\u00f3digo en un lenguaje de programaci\u00f3n es no generar una traducci\u00f3n a c\u00f3digo m\u00e1quina, sino analizar el c\u00f3digo y realizar lo que \u00e9ste indique.","title":"2. \u00bfExplica qu\u00e9 es compilar? \u00bfExplica qu\u00e9 es interpretar?"},{"location":"Tema1lenguajes/#3-ventajas-de-los-lenguajes-compilados","text":"Al haber compilado y traducido el programa, su pricnipal ventaja es que tiene una ejecuci\u00f3n muy eficiente.","title":"3. Ventajas de los lenguajes compilados:"},{"location":"Tema1lenguajes/#4-ventajas-de-los-lenguajes-interpretados","text":"En cambio, una ventaja de los interpretados es que el c\u00f3digo fuente se interpreta directamente.","title":"4. Ventajas de los lenguajes interpretados:"},{"location":"Tema1lenguajes/#5-nombra-2-lenguajes-compilados-y-otros-2-interpretados","text":"Dos compilados pueden ser C y C++ y dos compilados pueden ser Javascript o PHP.","title":"5. Nombra 2 lenguajes compilados y otros 2 interpretados."},{"location":"Tema1lenguajes/#6-puede-considerarse-codigo-objeto-el-bytecode-generado-en-java-tras-la-compilacion-explica-la-respuesta","text":"Se puede considerar c\u00f3digo objeto para esa m\u00e1quina virtual en particular, en ning\u00fan caso ser\u00e1 un c\u00f3digo objeto nativo al ya haber sido compilado.","title":"6. Puede considerarse c\u00f3digo objeto el bytecode generado en Java tras la compilaci\u00f3n? Explica la respuesta."},{"location":"Tema1lenguajes/#7-pon-un-ejemplo-de-lenguaje-de-los-siguientes-tipos","text":"Bajo nivel: Ensamblador Nivel intermedio: C Alto nivel: Java","title":"7. Pon un ejemplo de lenguaje de los siguientes tipos:"},{"location":"Tema1lenguajes/#8que-paradigma-de-programacion-siguen-los-siguientes-lenguajes","text":"C: imperativo estructurado C++: imperativo multiparadigma SQL: declarativo algebraico Java: imperativo orientado a objetos Javascript: imperativo multiparadigma Lisp: dclarativo funcional Prolog: declarativo l\u00f3gico","title":"8.\u00bfQu\u00e9 paradigma de programaci\u00f3n siguen los siguientes lenguajes?"},{"location":"Tema1lenguajes/#9-explica-que-criterios-pueden-seguirse-a-la-hora-de-elegir-un-lenguade-de-programacion-para-el-desarrollo-software","text":"Campo de aplicaci\u00f3n Experiencia previa Herramientas de desarrollo Documentaci\u00f3n disponible Base de usuarios Reusabilidad Transportabilidad Imposici\u00f3n del cliente","title":"9. Explica qu\u00e9 criterios pueden seguirse a la hora de elegir un lenguade de programaci\u00f3n para el desarrollo software."},{"location":"Tema2_herramientas_Desarrollo/","text":"Ejercicio 1: Ejecuta un hola mundo en distintos lenguajes Bash: echo \"Hola, Juan\"; Python: print (\"Hola, Juan\") Javascript console.log(\"Hola, Juan\"); C int main() { printf(\"\u00a1Hola, Juan!\"); return 0; } Java class Hola { public static void main(String[] args) { System.out.println(\"Hola Juan\"); } } Ejercicio 2: Para cada uno de los lenguajes anteriores, indica el proceso realizado para conseguir ejecutar el c\u00f3digo: \u00bfcompilaci\u00f3n o interpretaci\u00f3n? (he dejado algunas capturas de pantalla donde se ve el proceso de complilaci\u00f3n y ejecuci\u00f3n) Bash --> utilizamos el interprete de la consola de linux, por tanto es un lenguaje interpretado Python --> descargando la extensi\u00f3n de phython, lo hice por Visual studio Code. Tambi\u00e9n fue un lenguaje interpretado. JavaScript --> LO hicimos en un int\u00e9rprete de JS online, por tanto otro interpretado. C --> Con C tuvimos que compilar y ejecutar en la consola de Linux Java --> ionterpretaci\u00f3n, compilaci\u00f3n y ejecuci\u00f3n en la consola de Linux. Ejercicio3: Para cada uno de los lenguajes anteriores, indica el nombre del compilador o interprete utilizado en GNU/Linux. Bash - Terminal, Python - VS Code, Javascript - RunJS, C - terminal, Java - Terminal. Ejercicio 04: bash --> .sh python --> .py php --> .php javascript --> .js c --> .c c++ --> .cpp java --> .java ensamblador --> .asm ruby --> .rb go --> .go rust --> .rs lisp --> .lisp Ejercicio 06 Los archivos de c\u00f3digo objeto tienen la extensi\u00f3n .obj o la extensi\u00f3n .o Ejercicio 07-08 Ejercicio 11 Las bibliotecas se puedend definir como un conjunto de archivos objeto que extienden la funcionalidad del lenguaje, es decir, nos permiten poder hacer m\u00e1s cosas y programas m\u00e1s complejos en cada lenguaje de programaci\u00f3n. Ejercicio 12 Es m\u00e1s com\u00fan el uso de bibiliotecas din\u00e1micas para la funcionalidad b\u00e1sica, y el uso de plugins se deja para la funcionalidad opcional. Ejercicio 13 gcc -c -fPIC aritmetica.c gcc -shared -fPIC -o libaritmetica.so aritmetica.o cp libaritmetica.so /lib Ejercicio 14 mkdir aritmetica javac aritmetica/Aritmetica.java jar cvf aritmetica.jar aritmetica/*.class mv aritmetica.jar /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext/aritm.jar Ejercicio 15 Ventaja: No es necesario proporcionar las bibliotecas correspondientes al publicar el programa. Biblioteca de carga r\u00e1pida Desventaja La biblioteca est\u00e1 empaquetada en la aplicaci\u00f3n, lo que resulta en una gran biblioteca. La biblioteca ha cambiado y es necesario volver a compilar el programa. Ejercicio 16 Ventajas: 1) Ahorra m\u00e1s memoria y reduzca el intercambio de p\u00e1ginas. 2) El archivo so es independiente del archivo EXE, siempre que la interfaz de salida permanezca igual (es decir, el nombre, los par\u00e1metros, el tipo de valor de retorno y la convenci\u00f3n de llamada no cambien), reemplazar el archivo so no causar\u00e1 el archivo EXE Cualquier impacto, mejorando as\u00ed la capacidad de mantenimiento y la escalabilidad. 3) Los programas escritos en diferentes lenguajes de programaci\u00f3n pueden llamar a la misma para que funcionen siempre que sigan la convenci\u00f3n de llamada de funci\u00f3n. 4) Es adecuado para el desarrollo de software a gran escala, lo que hace que el proceso de desarrollo sea independiente y menos acoplado, lo que es conveniente para el desarrollo y las pruebas entre diferentes desarrolladores y organizaciones de desarrollo. Desventajas 1) El archivo ejecutable generado por el enlace est\u00e1tico es de gran tama\u00f1o y contiene el mismo c\u00f3digo com\u00fan, lo que causa desperdicio. 2) La aplicaci\u00f3n que usa la biblioteca de enlaces din\u00e1micos no es aut\u00f3noma, y el m\u00f3dulo del que depende tambi\u00e9n debe existir. Si usa enlaces din\u00e1micos al cargar, la DLL no existe cuando se inicia el programa. El sistema terminar\u00e1 el programa y dar\u00e1 un mensaje de error. Con el enlace din\u00e1mico en tiempo de ejecuci\u00f3n, el sistema no terminar\u00e1, pero debido a que la funci\u00f3n exportada no est\u00e1 disponible, el programa no se cargar\u00e1; la velocidad es m\u00e1s lenta que el enlace est\u00e1tico. Despu\u00e9s de actualizar un determinado m\u00f3dulo, si el nuevo m\u00f3dulo no es compatible con el m\u00f3dulo anterior, se arrancar\u00e1 todo el software que necesita el m\u00f3dulo para ejecutarse. Ejercicio 17 make gcc -O -c main.c gcc -O -c -fPIC aritmetica.c gcc -O -shared -fPIC -o libaritmetica.so aritmetica.o gcc -O -Wl,-rpath=/usr/local/lib main.o libaritmetica.so -o programa Ejercicio 19","title":"Herramientas de Desarrollo"},{"location":"Tema2_herramientas_Desarrollo/#ejercicio-1-ejecuta-un-hola-mundo-en-distintos-lenguajes","text":"","title":"Ejercicio 1: Ejecuta un hola mundo en distintos lenguajes"},{"location":"Tema2_herramientas_Desarrollo/#bash","text":"echo \"Hola, Juan\";","title":"Bash:"},{"location":"Tema2_herramientas_Desarrollo/#python","text":"print (\"Hola, Juan\")","title":"Python:"},{"location":"Tema2_herramientas_Desarrollo/#javascript","text":"console.log(\"Hola, Juan\");","title":"Javascript"},{"location":"Tema2_herramientas_Desarrollo/#c","text":"int main() { printf(\"\u00a1Hola, Juan!\"); return 0; }","title":"C"},{"location":"Tema2_herramientas_Desarrollo/#java","text":"class Hola { public static void main(String[] args) { System.out.println(\"Hola Juan\"); } }","title":"Java"},{"location":"Tema2_herramientas_Desarrollo/#ejercicio-2-para-cada-uno-de-los-lenguajes-anteriores-indica-el-proceso-realizado-para-conseguir-ejecutar-el-codigo-compilacion-o-interpretacion","text":"(he dejado algunas capturas de pantalla donde se ve el proceso de complilaci\u00f3n y ejecuci\u00f3n) Bash --> utilizamos el interprete de la consola de linux, por tanto es un lenguaje interpretado Python --> descargando la extensi\u00f3n de phython, lo hice por Visual studio Code. Tambi\u00e9n fue un lenguaje interpretado. JavaScript --> LO hicimos en un int\u00e9rprete de JS online, por tanto otro interpretado. C --> Con C tuvimos que compilar y ejecutar en la consola de Linux Java --> ionterpretaci\u00f3n, compilaci\u00f3n y ejecuci\u00f3n en la consola de Linux.","title":"Ejercicio 2: Para cada uno de los lenguajes anteriores, indica el proceso realizado  para conseguir ejecutar el c\u00f3digo: \u00bfcompilaci\u00f3n o interpretaci\u00f3n?"},{"location":"Tema2_herramientas_Desarrollo/#ejercicio3-para-cada-uno-de-los-lenguajes-anteriores-indica-el-nombre-del-compilador-o-interprete-utilizado-en-gnulinux","text":"Bash - Terminal, Python - VS Code, Javascript - RunJS, C - terminal, Java - Terminal.","title":"Ejercicio3: Para cada uno de los lenguajes anteriores, indica el nombre del compilador o interprete utilizado en GNU/Linux."},{"location":"Tema2_herramientas_Desarrollo/#ejercicio-04","text":"bash --> .sh python --> .py php --> .php javascript --> .js c --> .c c++ --> .cpp java --> .java ensamblador --> .asm ruby --> .rb go --> .go rust --> .rs lisp --> .lisp","title":"Ejercicio 04:"},{"location":"Tema2_herramientas_Desarrollo/#ejercicio-06","text":"Los archivos de c\u00f3digo objeto tienen la extensi\u00f3n .obj o la extensi\u00f3n .o","title":"Ejercicio 06"},{"location":"Tema2_herramientas_Desarrollo/#ejercicio-07-08","text":"","title":"Ejercicio 07-08"},{"location":"Tema2_herramientas_Desarrollo/#ejercicio-11","text":"Las bibliotecas se puedend definir como un conjunto de archivos objeto que extienden la funcionalidad del lenguaje, es decir, nos permiten poder hacer m\u00e1s cosas y programas m\u00e1s complejos en cada lenguaje de programaci\u00f3n.","title":"Ejercicio 11"},{"location":"Tema2_herramientas_Desarrollo/#ejercicio-12","text":"Es m\u00e1s com\u00fan el uso de bibiliotecas din\u00e1micas para la funcionalidad b\u00e1sica, y el uso de plugins se deja para la funcionalidad opcional.","title":"Ejercicio 12"},{"location":"Tema2_herramientas_Desarrollo/#ejercicio-13","text":"gcc -c -fPIC aritmetica.c gcc -shared -fPIC -o libaritmetica.so aritmetica.o cp libaritmetica.so /lib","title":"Ejercicio 13"},{"location":"Tema2_herramientas_Desarrollo/#ejercicio-14","text":"mkdir aritmetica javac aritmetica/Aritmetica.java jar cvf aritmetica.jar aritmetica/*.class mv aritmetica.jar /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext/aritm.jar","title":"Ejercicio 14"},{"location":"Tema2_herramientas_Desarrollo/#ejercicio-15","text":"","title":"Ejercicio 15"},{"location":"Tema2_herramientas_Desarrollo/#ventaja","text":"No es necesario proporcionar las bibliotecas correspondientes al publicar el programa. Biblioteca de carga r\u00e1pida","title":"Ventaja:"},{"location":"Tema2_herramientas_Desarrollo/#desventaja","text":"La biblioteca est\u00e1 empaquetada en la aplicaci\u00f3n, lo que resulta en una gran biblioteca. La biblioteca ha cambiado y es necesario volver a compilar el programa.","title":"Desventaja"},{"location":"Tema2_herramientas_Desarrollo/#ejercicio-16","text":"","title":"Ejercicio 16"},{"location":"Tema2_herramientas_Desarrollo/#ventajas","text":"1) Ahorra m\u00e1s memoria y reduzca el intercambio de p\u00e1ginas. 2) El archivo so es independiente del archivo EXE, siempre que la interfaz de salida permanezca igual (es decir, el nombre, los par\u00e1metros, el tipo de valor de retorno y la convenci\u00f3n de llamada no cambien), reemplazar el archivo so no causar\u00e1 el archivo EXE Cualquier impacto, mejorando as\u00ed la capacidad de mantenimiento y la escalabilidad. 3) Los programas escritos en diferentes lenguajes de programaci\u00f3n pueden llamar a la misma para que funcionen siempre que sigan la convenci\u00f3n de llamada de funci\u00f3n. 4) Es adecuado para el desarrollo de software a gran escala, lo que hace que el proceso de desarrollo sea independiente y menos acoplado, lo que es conveniente para el desarrollo y las pruebas entre diferentes desarrolladores y organizaciones de desarrollo.","title":"Ventajas:"},{"location":"Tema2_herramientas_Desarrollo/#desventajas","text":"1) El archivo ejecutable generado por el enlace est\u00e1tico es de gran tama\u00f1o y contiene el mismo c\u00f3digo com\u00fan, lo que causa desperdicio. 2) La aplicaci\u00f3n que usa la biblioteca de enlaces din\u00e1micos no es aut\u00f3noma, y el m\u00f3dulo del que depende tambi\u00e9n debe existir. Si usa enlaces din\u00e1micos al cargar, la DLL no existe cuando se inicia el programa. El sistema terminar\u00e1 el programa y dar\u00e1 un mensaje de error. Con el enlace din\u00e1mico en tiempo de ejecuci\u00f3n, el sistema no terminar\u00e1, pero debido a que la funci\u00f3n exportada no est\u00e1 disponible, el programa no se cargar\u00e1; la velocidad es m\u00e1s lenta que el enlace est\u00e1tico. Despu\u00e9s de actualizar un determinado m\u00f3dulo, si el nuevo m\u00f3dulo no es compatible con el m\u00f3dulo anterior, se arrancar\u00e1 todo el software que necesita el m\u00f3dulo para ejecutarse.","title":"Desventajas"},{"location":"Tema2_herramientas_Desarrollo/#ejercicio-17","text":"make gcc -O -c main.c gcc -O -c -fPIC aritmetica.c gcc -O -shared -fPIC -o libaritmetica.so aritmetica.o gcc -O -Wl,-rpath=/usr/local/lib main.o libaritmetica.so -o programa","title":"Ejercicio 17"},{"location":"Tema2_herramientas_Desarrollo/#ejercicio-19","text":"","title":"Ejercicio 19"},{"location":"Tema2ei/","text":"Entornos Integrados Ejercicio 1 y 2 - Instalaci\u00f3n Sublime text Hemos instalado el Sublime Text buscando su descargable para Ubuntu en instalando manualmente Una vez instalado el Sublime , con el Package Control : Install Package nos encargamos de instalar los plugins necesarios que ped\u00eda el ejercicio. he aqu\u00ed una captura con algunos de ellos que aparecen en el Preferences - Package Settings Ejercicio 3 El elemento Emmet permite que la parte mec\u00e1nica de la programaci\u00f3n, que es escribir los tags o palabras reservadas suponga mucho menos esfuerzo y tiempo. En un archivo HTML, al \u00fanicamente poner un s\u00edmbolo de exclamaci\u00f3n, nos genera una estructura HTML b\u00e1sica. Y ya tenemos nuestro archivo HTML simple con un p\u00e1rrafo. Ejercicio 4 Instalado el VS Code. Ejercicio 5 Sublime VS Code Terminal dif\u00edcil de abrir y es necesario instalar un paquete terminal viene integrada y es f\u00e1cil de abrir Emmet necesaria previa instalaci\u00f3n nos lo facilita el editor iconos para archivos no son nada visuales e incluso no tienen muy visuales y facil de distinguir atajos de teclas para comentar dificiles de encontrar necesario el emmet atajo de teclas para buscar dificiles de encontrar necesario el emmet Ejercicio 6 Debemos instalar el open-jdk desde l\u00ednea de comando preferiblemente Ejercicio 7 instalado el NetBeans Ejercicio 9 He cogido cualquier ejercicio simple y lo he ejecutado aqu\u00ed Ejercicio 10 De los que conocemos, usa maven y Gradle. Tambi\u00e9n da la opci\u00f3n de usar el Ant","title":"Entornos integrados de Desarrollo (IDE)"},{"location":"Tema2ei/#entornos-integrados","text":"","title":"Entornos Integrados"},{"location":"Tema2ei/#ejercicio-1-y-2-instalacion-sublime-text","text":"Hemos instalado el Sublime Text buscando su descargable para Ubuntu en instalando manualmente Una vez instalado el Sublime , con el Package Control : Install Package nos encargamos de instalar los plugins necesarios que ped\u00eda el ejercicio. he aqu\u00ed una captura con algunos de ellos que aparecen en el Preferences - Package Settings","title":"Ejercicio 1 y 2 - Instalaci\u00f3n Sublime text"},{"location":"Tema2ei/#ejercicio-3","text":"El elemento Emmet permite que la parte mec\u00e1nica de la programaci\u00f3n, que es escribir los tags o palabras reservadas suponga mucho menos esfuerzo y tiempo. En un archivo HTML, al \u00fanicamente poner un s\u00edmbolo de exclamaci\u00f3n, nos genera una estructura HTML b\u00e1sica. Y ya tenemos nuestro archivo HTML simple con un p\u00e1rrafo.","title":"Ejercicio 3"},{"location":"Tema2ei/#ejercicio-4","text":"Instalado el VS Code.","title":"Ejercicio 4"},{"location":"Tema2ei/#ejercicio-5","text":"Sublime VS Code Terminal dif\u00edcil de abrir y es necesario instalar un paquete terminal viene integrada y es f\u00e1cil de abrir Emmet necesaria previa instalaci\u00f3n nos lo facilita el editor iconos para archivos no son nada visuales e incluso no tienen muy visuales y facil de distinguir atajos de teclas para comentar dificiles de encontrar necesario el emmet atajo de teclas para buscar dificiles de encontrar necesario el emmet","title":"Ejercicio 5"},{"location":"Tema2ei/#ejercicio-6","text":"Debemos instalar el open-jdk desde l\u00ednea de comando preferiblemente","title":"Ejercicio 6"},{"location":"Tema2ei/#ejercicio-7","text":"instalado el NetBeans","title":"Ejercicio 7"},{"location":"Tema2ei/#ejercicio-9","text":"He cogido cualquier ejercicio simple y lo he ejecutado aqu\u00ed","title":"Ejercicio 9"},{"location":"Tema2ei/#ejercicio-10","text":"De los que conocemos, usa maven y Gradle. Tambi\u00e9n da la opci\u00f3n de usar el Ant","title":"Ejercicio 10"},{"location":"Tema_1_Ejercicios/","text":"Tema 1 Ciclo de vida del software 1.Define \"Ciclo de vida del software\". Es un proceso que consta de una serie de pasos que buscan garantizar que los programas creados son eficientes, fiables, seguros y responden a las necesidades de los usuarios finales. Como el ciclo de la vida de un ser humano. 2.Nombra las fases principales del desarrollo de software y explica brevemente que se hace en cada una de ellas. AN\u00c1LISIS: Proceso en el que se determina y analiza qu\u00e9 programa nos piden y como lo vamos a desarrollar. DISE\u00d1O: Se descompone y organizamos los distintos elementos para el desarrollo. CODIFICACI\u00d3N: Se escribe el c\u00f3digo fuente de cada componente. PRUEBAS: Se prueba el programa y se intentan buscar defectos para solucionarlos. MANTENIMIENTO: Se revisa el programa como en pasos anteriores para garantizar su funcionamiento. 3.Explica brevemente en qu\u00e9 consiste el modelo en cascada cuando hablamos de desarrollo de software. Hablamos del modelo de desarrollo de software m\u00e1s antiguo, con las fases principales del desarrollo y el cu\u00e1l siempre sigue el orden r\u00edgido. 4.Ventajas e inconvenientes del modelo en cascada. Est\u00e1 anticuado y obsoleto, y se adapta mal a los cambios de especificaciones que en el desarrollo debe ser continuo por parte del cliente. 5.\u00bfQu\u00e9 se entiende por verificaci\u00f3n? \u00bfY por validaci\u00f3n? Verificaci\u00f3n: Comprueba que el software cumple con los requisitos especificados. Validaci\u00f3n: Comprueba que el software es correcto con respecto a lo que el cliente pide. 6.Explica como funciona el modelo de desarrollo mediante creaci\u00f3n de prototipos. Se crea un prototipo durante la fase de an\u00e1lisis y ser\u00e1 probado por el cliente para ajustar y refinar el software, y as\u00ed las veces que haga falta. Metodolog\u00edas \u00e1giles 1. KANBAN. Haz un resumen de la metodolog\u00eda Kanban e indica sus diferencias frente a SCRUM. Es denominado sistema de tarjetas, puesto que va ordenando las tareas y los procesos en tarjetas en el denominado tablero Kanban. Controla la fabricaci\u00f3n del producto en la cantidad de tiempo necesario y ayuda al flujo de trabajo con la entrega continua. Sus diferencias con Scrum son tales como la cadencia, en Scrum es de longitud fija y en Kanban es de flujo continuo. As\u00ed como los cambios, en Kanban se trabaja esperando el cambio en cualquier momento mientras en Scrum se trabaja para evitar cambios repentinos. 2. SCRUM. Explica como funciona Scrum. Scrum funciona por Sprints (o iteraciones) regulares cada 2-4 semanas con el cliente, y reuniones face to face diar\u00edas con el equipo de trabajo. Despu\u00e9s se har\u00e1n retrospectivas y reviews para comprobar que se desarrolla en condiciones. 3. SCRUM. Define los siguientes t\u00e9rminos Sprint Backlog: Subconjunto de objetivos/requisitos del Product Backlog seleccionado para la iteraci\u00f3n actual y su plan de tareas de desarrollo Product backlog: El product backlog es un listado de todas las tareas que se pretenden hacer durante el desarrollo de un proyecto. 4. SCRUM. Haz un resumen de los requisitos para poder utilizar Scrum. Cultura de empresa, compromiso del cliente, compromiso de la direcci\u00f3n, compromiso conjunto y colaboraci\u00f3n de los miembros del equipo, relaci\u00f3n entre proveedor y cliente, Facilidad para realizar cambios, Tama\u00f1o de cada equipo, Dedicaci\u00f3n del equipo a tiempo completo, estabilidad de los miembros del equipo. 5. XP. Explica los 5 valores de la Programaci\u00f3n Extrema. Simplicidad: Los programas deben ser los m\u00e1s sencillos posibles y tener la funcionalidad necesaria que se indican en los requisitos. Comunicaci\u00f3n: La comunicaci\u00f3n entre programadores debe prevalecer. Retroalimentaci\u00f3n: Las pruebas que se le realizan al software nos mantiene informados del grado de fiabilidad del sistema. Valent\u00eda o coraje: Asumir retos, ser valientes ante los problemas y afrontarlos. Respeto o humildad: una buena dosis de humildad siempre es de agradecer. 6. XP. \u00bfCu\u00e1les son las caracter\u00edsticas distintivas de XP frente a otras metodolog\u00edas \u00e1giles? Expl\u00edcalas Favorece a la eficacia y sencillez, con el trabajo en equipo por parejas, y es una metodolog\u00eda \u00e1gil que se debe adaptar a nosotros, no nosotros adaptarnos a ella.","title":"Ciclo de vida del Software"},{"location":"Tema_1_Ejercicios/#tema-1","text":"","title":"Tema 1"},{"location":"Tema_1_Ejercicios/#ciclo-de-vida-del-software","text":"","title":"Ciclo de vida del software"},{"location":"Tema_1_Ejercicios/#1define-ciclo-de-vida-del-software","text":"Es un proceso que consta de una serie de pasos que buscan garantizar que los programas creados son eficientes, fiables, seguros y responden a las necesidades de los usuarios finales. Como el ciclo de la vida de un ser humano.","title":"1.Define \"Ciclo de vida del software\"."},{"location":"Tema_1_Ejercicios/#2nombra-las-fases-principales-del-desarrollo-de-software-y-explica-brevemente-que-se-hace-en-cada-una-de-ellas","text":"AN\u00c1LISIS: Proceso en el que se determina y analiza qu\u00e9 programa nos piden y como lo vamos a desarrollar. DISE\u00d1O: Se descompone y organizamos los distintos elementos para el desarrollo. CODIFICACI\u00d3N: Se escribe el c\u00f3digo fuente de cada componente. PRUEBAS: Se prueba el programa y se intentan buscar defectos para solucionarlos. MANTENIMIENTO: Se revisa el programa como en pasos anteriores para garantizar su funcionamiento.","title":"2.Nombra las fases principales del desarrollo de software y explica brevemente que se hace en cada una de ellas."},{"location":"Tema_1_Ejercicios/#3explica-brevemente-en-que-consiste-el-modelo-en-cascada-cuando-hablamos-de-desarrollo-de-software","text":"Hablamos del modelo de desarrollo de software m\u00e1s antiguo, con las fases principales del desarrollo y el cu\u00e1l siempre sigue el orden r\u00edgido.","title":"3.Explica brevemente en qu\u00e9 consiste el modelo en cascada cuando hablamos de desarrollo de software."},{"location":"Tema_1_Ejercicios/#4ventajas-e-inconvenientes-del-modelo-en-cascada","text":"Est\u00e1 anticuado y obsoleto, y se adapta mal a los cambios de especificaciones que en el desarrollo debe ser continuo por parte del cliente.","title":"4.Ventajas e inconvenientes del modelo en cascada."},{"location":"Tema_1_Ejercicios/#5que-se-entiende-por-verificacion-y-por-validacion","text":"Verificaci\u00f3n: Comprueba que el software cumple con los requisitos especificados. Validaci\u00f3n: Comprueba que el software es correcto con respecto a lo que el cliente pide.","title":"5.\u00bfQu\u00e9 se entiende por verificaci\u00f3n? \u00bfY por validaci\u00f3n?"},{"location":"Tema_1_Ejercicios/#6explica-como-funciona-el-modelo-de-desarrollo-mediante-creacion-de-prototipos","text":"Se crea un prototipo durante la fase de an\u00e1lisis y ser\u00e1 probado por el cliente para ajustar y refinar el software, y as\u00ed las veces que haga falta.","title":"6.Explica como funciona el modelo de desarrollo mediante creaci\u00f3n de prototipos."},{"location":"Tema_1_Ejercicios/#metodologias-agiles","text":"","title":"Metodolog\u00edas \u00e1giles"},{"location":"Tema_1_Ejercicios/#1-kanban-haz-un-resumen-de-la-metodologia-kanban-e-indica-sus-diferencias-frente-a-scrum","text":"Es denominado sistema de tarjetas, puesto que va ordenando las tareas y los procesos en tarjetas en el denominado tablero Kanban. Controla la fabricaci\u00f3n del producto en la cantidad de tiempo necesario y ayuda al flujo de trabajo con la entrega continua. Sus diferencias con Scrum son tales como la cadencia, en Scrum es de longitud fija y en Kanban es de flujo continuo. As\u00ed como los cambios, en Kanban se trabaja esperando el cambio en cualquier momento mientras en Scrum se trabaja para evitar cambios repentinos.","title":"1. KANBAN. Haz un resumen de la metodolog\u00eda Kanban e indica sus diferencias frente a SCRUM."},{"location":"Tema_1_Ejercicios/#2-scrum-explica-como-funciona-scrum","text":"Scrum funciona por Sprints (o iteraciones) regulares cada 2-4 semanas con el cliente, y reuniones face to face diar\u00edas con el equipo de trabajo. Despu\u00e9s se har\u00e1n retrospectivas y reviews para comprobar que se desarrolla en condiciones.","title":"2. SCRUM. Explica como funciona Scrum."},{"location":"Tema_1_Ejercicios/#3-scrum-define-los-siguientes-terminos","text":"Sprint Backlog: Subconjunto de objetivos/requisitos del Product Backlog seleccionado para la iteraci\u00f3n actual y su plan de tareas de desarrollo Product backlog: El product backlog es un listado de todas las tareas que se pretenden hacer durante el desarrollo de un proyecto.","title":"3. SCRUM. Define los siguientes t\u00e9rminos"},{"location":"Tema_1_Ejercicios/#4-scrum-haz-un-resumen-de-los-requisitos-para-poder-utilizar-scrum","text":"Cultura de empresa, compromiso del cliente, compromiso de la direcci\u00f3n, compromiso conjunto y colaboraci\u00f3n de los miembros del equipo, relaci\u00f3n entre proveedor y cliente, Facilidad para realizar cambios, Tama\u00f1o de cada equipo, Dedicaci\u00f3n del equipo a tiempo completo, estabilidad de los miembros del equipo.","title":"4. SCRUM. Haz un resumen de los requisitos para poder utilizar Scrum."},{"location":"Tema_1_Ejercicios/#5-xp-explica-los-5-valores-de-la-programacion-extrema","text":"Simplicidad: Los programas deben ser los m\u00e1s sencillos posibles y tener la funcionalidad necesaria que se indican en los requisitos. Comunicaci\u00f3n: La comunicaci\u00f3n entre programadores debe prevalecer. Retroalimentaci\u00f3n: Las pruebas que se le realizan al software nos mantiene informados del grado de fiabilidad del sistema. Valent\u00eda o coraje: Asumir retos, ser valientes ante los problemas y afrontarlos. Respeto o humildad: una buena dosis de humildad siempre es de agradecer.","title":"5. XP.  Explica los 5 valores de la Programaci\u00f3n Extrema."},{"location":"Tema_1_Ejercicios/#6-xp-cuales-son-las-caracteristicas-distintivas-de-xp-frente-a-otras-metodologias-agiles-explicalas","text":"Favorece a la eficacia y sencillez, con el trabajo en equipo por parejas, y es una metodolog\u00eda \u00e1gil que se debe adaptar a nosotros, no nosotros adaptarnos a ella.","title":"6. XP. \u00bfCu\u00e1les son las caracter\u00edsticas distintivas de XP frente a otras metodolog\u00edas \u00e1giles? Expl\u00edcalas"}]}